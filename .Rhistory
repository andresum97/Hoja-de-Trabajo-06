plot(modelo)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1700)
yweight <- predict(modelo,newdata = test[,1:10],type="response")
xweight <- seq(35000, 755000, 1640)
xweight <- seq(35000, 755000, 1645)
xweight <- seq(35000, 755000, 1635)
xweight <- seq(35000, 755000, 1636)
xweight <- seq(35000, 755000, 1638)
xweight <- seq(35000, 755000, 1640)
xweight <- seq(35000, 755000, 1641)
xweight <- seq(35000, 755000, 1642)
yweight
yweight <- ifelse(yweight>=0.5,1,0)
yweight
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,newdata = test[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,newdata = test[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,newdata = test[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,newdata = test[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
xweight
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,newdata = test[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight)
lines(xweight)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,newdata = test[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,list(SalePrice = xweight),type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
yweight <- predict(modelo,list(train$SalePrice = xweight),type="response")
mtcars
colnames(mtcars)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,list(SalePrice = xweight),type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
modelo
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,list(test[,1:10] = xweight),type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
yweight <- predict(modelo,list(test[,1:10]),type="response")
llist(test[,1:10])
list(test[,1:10])
head(list(test[,1:10]))
yweight <- predict(modelo,test[,1:10],type="response")
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,test[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 1642)
yweight <- predict(modelo,train[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
xweight <- seq(35000, 755000, 700)
xweight <- seq(35000, 755000, 710)
xweight <- seq(35000, 755000, 79)
xweight <- seq(35000, 755000, 790)
xweight <- seq(35000, 755000, 700)
xweight <- seq(35000, 755000, 600)
xweight <- seq(35000, 755000, 750)
xweight <- seq(35000, 755000, 720)
xweight <- seq(35000, 755000, 730)
xweight <- seq(35000, 755000, 740)
xweight <- seq(35000, 755000, 750)
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
xweight <- seq(35000, 755000, 705)
xweight <- seq(35000, 755000, 706)
xweight <- seq(35000, 755000, 705.5)
range(train$EsCara)
range(train$SalePrice)
xweight <- seq(35000, 755000, 705.5)
yweight <- predict(modelo,train[,1:10],type="response")
#yweight <- ifelse(yweight>=0.5,1,0)
plot(train$SalePrice, train$EsCara, pch = 16, xlab = "PRECIOS", ylab = "ES O NO CARA")
lines(xweight, yweight)
library(popbio)
logi.hist.plot(train$salePrice,train$EsCara,boxp=FALSE,type="hist",col="gray")
plot(train$salePrice,train$EsCara,xlab="Precio",ylab="Es cara")
nrow(train$SalePrice)
train$SalePrice
train$EsCara
length(train$EsCara)
length(train$SalePrice)
plot(train$salePrice,train$EsCara,xlab="Precio",ylab="Es cara")
library(caret)
library(dummies)
library(plyr)
library(dplyr)
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
porcentaje<-0.7
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
g1<- trainImportantes[trainImportantes$grupo==1,]
g2<- trainImportantes[trainImportantes$grupo==2,]
g3<- trainImportantes[trainImportantes$grupo==3,]
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
trainImportantes<-cbind(trainImportantes,dummy(trainImportantes$grupo,verbose = T))
colnames(trainImportantes)[13] <- "EsBarata"
colnames(trainImportantes)[14] <- "EsCara"
colnames(trainImportantes)[15] <- "EsIntermedia"
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
#Queremos saber si una casa es cara o no
modelo<-glm(EsCara~., data = train[,c(1:10,14)],family = binomial(), maxit=100)
##Modelo con todas las variables
pred<-predict(modelo,newdata = test[,1:10], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
plot(modelo)
ored
pred
plot(train$SalePrice,pred,xlab="Body size",ylab="Probability of survival")
plot(test$SalePrice,pred,xlab="Body size",ylab="Probability of survival")
quartz(title="bodysize vs. survival") # creates a quartz window with title
View(head(test))
library(caret)
library(dummies)
library(plyr)
library(dplyr)
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
porcentaje<-0.7
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
trainImportantes<-cbind(trainImportantes,dummy(trainImportantes$grupo,verbose = T))
colnames(trainImportantes)[13] <- "EsBarata"
colnames(trainImportantes)[14] <- "EsCara"
colnames(trainImportantes)[15] <- "EsIntermedia"
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
#Queremos saber si una casa es cara o no
modelo<-glm(EsCara~., data = train[,c(1:10,14)],family = binomial(), maxit=100)
modelo
##Modelo con todas las variables
pred<-predict(modelo,newdata = test[,1:10], type = "response")
typeof(pred)
precios <- test$SalePrice
dat=as.data.frame(cbind(precios,pred))
dat
View(head(dat))
plot(precios,pred,xlab="Body size",ylab="Probability of survival") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(pred~precios,family=binomial,dat) # run a logistic regression model (in this case, generalized linear model with logit link). see ?glm
curve(predict(g,data.frame(precios=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(precios,fitted(g),pch=20)
library(caret)
library(dummies)
library(plyr)
library(dplyr)
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
porcentaje<-0.7
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
trainImportantes<-cbind(trainImportantes,dummy(trainImportantes$grupo,verbose = T))
colnames(trainImportantes)[13] <- "EsBarata"
colnames(trainImportantes)[14] <- "EsCara"
colnames(trainImportantes)[15] <- "EsIntermedia"
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
#Queremos saber si una casa es cara o no
modelo<-glm(EsCara~., data = train[,c(1:10,14)],family = binomial(), maxit=100)
##Modelo con todas las variables
pred<-predict(modelo,newdata = test[,1:10], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
plot(modelo)
precios <- test$SalePrice
dat=as.data.frame(cbind(precios,prediccion))
plot(precios,pred,xlab="Body size",ylab="Probability of survival") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(prediccion~precios,family=binomial,dat) # run a logistic regression model (in this case, generalized linear model with logit link). see ?glm
curve(predict(g,data.frame(precios=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(precios,fitted(g),pch=20)
#library(e1071)
#install.packages("dummy) Esto es para convertir todas las variables categóricas del set de datos
#install.packages("dummies") Este es para convertir solo una variable
library(caret)
library(dummies)
library(plyr)
library(dplyr)
#Modelo de Regresión logística
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
#setwd("C:/Users/alber/Documents/UVG/Septimo semestre/Mineria de Datos/Hoja-Trabajo-5/Hoja-de-trabajo-5")
porcentaje<-0.7
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
g1<- trainImportantes[trainImportantes$grupo==1,]
g2<- trainImportantes[trainImportantes$grupo==2,]
g3<- trainImportantes[trainImportantes$grupo==3,]
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
trainImportantes<-cbind(trainImportantes,dummy(trainImportantes$grupo,verbose = T))
colnames(trainImportantes)[13] <- "EsBarata"
colnames(trainImportantes)[14] <- "EsCara"
colnames(trainImportantes)[15] <- "EsIntermedia"
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
#Queremos saber si una casa es cara o no
modelo<-glm(EsCara~., data = train[,c(1:10,14)],family = binomial(), maxit=100)
##Modelo con todas las variables
pred<-predict(modelo,newdata = test[,1:10], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
precios <- test$SalePrice
dat=as.data.frame(cbind(precios,prediccion))
plot(precios,pred,xlab="Body size",ylab="Probability of survival") # plot with body size on x-axis and survival (0 or 1) on y-axis
##Modelo con todas las variables
pred<-predict(modelo,newdata = test[,1:10], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
plot(modelo)
precios <- test$SalePrice
dat=as.data.frame(cbind(precios,prediccion))
plot(precios,prediccion,xlab="Body size",ylab="Probability of survival") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(prediccion~precios,family=binomial,dat) # run a logistic regression model (in this case, generalized linear model with logit link). see ?glm
curve(predict(g,data.frame(precios=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(precios,fitted(g),pch=20)
quartz(title="Precio de Casa vs. Ser Cara") # creates a quartz window with title
library(caret)
library(dummies)
library(plyr)
library(dplyr)
#Modelo de Regresión logística
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
#setwd("C:/Users/alber/Documents/UVG/Septimo semestre/Mineria de Datos/Hoja-Trabajo-5/Hoja-de-trabajo-5")
porcentaje<-0.7
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
g1<- trainImportantes[trainImportantes$grupo==1,]
g2<- trainImportantes[trainImportantes$grupo==2,]
g3<- trainImportantes[trainImportantes$grupo==3,]
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
trainImportantes<-cbind(trainImportantes,dummy(trainImportantes$grupo,verbose = T))
colnames(trainImportantes)[13] <- "EsBarata"
colnames(trainImportantes)[14] <- "EsCara"
colnames(trainImportantes)[15] <- "EsIntermedia"
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
#Queremos saber si una casa es cara o no
modelo<-glm(EsCara~., data = train[,c(1:10,14)],family = binomial(), maxit=100)
#-------------------------------------------------
# Regresión Logistica
#-------------------------------------------------
##Modelo con todas las variables
pred<-predict(modelo,newdata = test[,1:10], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
#-------------------------------------------------------
#GRAFICA PARA ANALISIS DE DATOS
plot(modelo)
dat=as.data.frame(cbind(precios,prediccion))
plot(precios,prediccion,xlab="Precio de Casa",ylab="Probability of Ser Cara")
g=glm(prediccion~precios,family=binomial,dat)
curve(predict(g,data.frame(precios=x),type="resp"),add=TRUE)
points(precios,fitted(g),pch=20)
library(caret)
library(dummies)
library(plyr)
library(dplyr)
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
porcentaje<-0.7
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
trainImportantes<-cbind(trainImportantes,dummy(trainImportantes$grupo,verbose = T))
colnames(trainImportantes)[13] <- "EsBarata"
colnames(trainImportantes)[14] <- "EsCara"
colnames(trainImportantes)[15] <- "EsIntermedia"
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
#Queremos saber si una casa es cara o no
modelo<-glm(EsCara~., data = train[,c(1:10,14)],family = binomial(), maxit=100)
##Modelo con todas las variables
pred<-predict(modelo,newdata = test[,1:10], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
#-------------------------------------------------------
#GRAFICA DE REGRESION LOGISTICA
#-------------------------------------------------------
precios <- test$SalePrice
dat=as.data.frame(cbind(precios,prediccion))
plot(precios,prediccion,xlab="Precio de Casa",ylab="Probability of Ser Cara")
g=glm(prediccion~precios,family=binomial,dat)
curve(predict(g,data.frame(precios=x),type="resp"),add=TRUE)
points(precios,fitted(g),pch=20)
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
library(corrplot)
matriz_cor <- cor(trainImportantes)
matriz_cor <- cor(trainImportantes)
trainImportantes
colnames(trainImportantes)
variables <- trainImportantes
variables$grupo <- NULL
matriz_cor <- cor(trainImportantes)
matriz_cor
corrplot(matriz_cor)
variables <- trainImportantes
variables$grupo <- NULL
matriz_cor <- cor(variables)
matriz_cor
corrplot(matriz_cor)
View(head(trainImportantes))
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
library(caret)
library(dummies)
library(plyr)
library(dplyr)
library(e1071)
library(lattice)
library(rpart)
library(randomForest)
#setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
setwd("C:/Users/alber/Documents/UVG/Septimo semestre/Mineria de Datos/Hoja-Trabajo-6/Hoja-de-trabajo-06")
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
porcentaje<-0.7
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
g1<- trainImportantes[trainImportantes$grupo==1,]
g2<- trainImportantes[trainImportantes$grupo==2,]
g3<- trainImportantes[trainImportantes$grupo==3,]
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
trainImportantes<-cbind(trainImportantes,dummy(trainImportantes$grupo,verbose = T))
colnames(trainImportantes)[13] <- "EsBarata"
colnames(trainImportantes)[14] <- "EsCara"
colnames(trainImportantes)[15] <- "EsIntermedia"
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
#Queremos saber si una casa es cara o no
modelo<-glm(EsCara~., data = train[,c(1:10,14)],family = binomial(), maxit=100)
##Modelo con todas las variables
pred<-predict(modelo,newdata = test[,1:10], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$EsCara),as.factor(prediccion))
#-------------------------------------------------------
#GRAFICA PARA ANALISIS DE DATOS
plot(modelo)
dat=as.data.frame(cbind(precios,prediccion))
plot(precios,prediccion,xlab="Precio de Casa",ylab="Probability of Ser Cara")
g=glm(prediccion~precios,family=binomial,dat)
curve(predict(g,data.frame(precios=x),type="resp"),add=TRUE)
points(precios,fitted(g),pch=20)
#-------------------------------------------------------
#GRAFICA DE REGRESION LOGISTICA
#-------------------------------------------------------
precios <- test$SalePrice
dat=as.data.frame(cbind(precios,prediccion))
plot(precios,prediccion,xlab="Precio de Casa",ylab="Probability of Ser Cara")
g=glm(prediccion~precios,family=binomial,dat)
curve(predict(g,data.frame(precios=x),type="resp"),add=TRUE)
points(precios,fitted(g),pch=20)
#COMPARACION CON NAIVES BAYES
#------------------------------------------------------
modelo_naive<-naiveBayes(as.factor(EsCara)~.,data=trainImportantes)
predBayes<-predict(modelo_naive, newdata = test[,1:10])
confusionMatrix(table(predBayes,test$EsCara))
#COMPARACION CON ARBOL DE PREDICCION (CLASIFICACION)
#-----------------------------------------------------
modelo_class<-rpart(EsCara~.,trainImportantes,method = "class")
prediccion <- predict(modelo, newdata = test[,1:10])
#columnaMasAlta<-apply(prediccion, 1, function(x) colnames(prediccion)[which.max(x)])
#test1$prediccion<-columnaMasAlta #Se le aÃ±ade al grupo de prueba el valor de la predicciÃ³n
#View(test1)
cfm<-confusionMatrix(table(test1$prediccion, test1$grupo))
cfm
#RANDOM FOREST
#------------------------------------------------------
modelo_RF<-randomForest(EsCara~.,data=trainImportantes)
library(caret)
library(dummies)
library(plyr)
library(dplyr)
library(e1071)
library(lattice)
library(rpart)
library(randomForest)
#Modelo de Regresi?n log?stica
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT6/Hoja-de-Trabajo-06")
#setwd("C:/Users/alber/Documents/UVG/Septimo semestre/Mineria de Datos/Hoja-Trabajo-6/Hoja-de-trabajo-06")
porcentaje<-0.7
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
g1<- trainImportantes[trainImportantes$grupo==1,]
g2<- trainImportantes[trainImportantes$grupo==2,]
g3<- trainImportantes[trainImportantes$grupo==3,]
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
trainImportantes<-cbind(trainImportantes,dummy(trainImportantes$grupo,verbose = T))
colnames(trainImportantes)[13] <- "EsBarata"
colnames(trainImportantes)[14] <- "EsCara"
colnames(trainImportantes)[15] <- "EsIntermedia"
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
#RANDOM FOREST
#------------------------------------------------------
modelo_RF<-randomForest(EsCara~.,data=trainImportantes)
#RANDOM FOREST
#------------------------------------------------------
modelo_RF<-randomForest(grupo~.,data=trainImportantes)
#RANDOM FOREST
#------------------------------------------------------
trainTree <- train[c("LotArea","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","KitchenAbvGr","GarageCars","SalePrice")]
#RANDOM FOREST
#------------------------------------------------------
train <- read.csv("train.csv", stringsAsFactors = FALSE)
trainTree <- train[c("LotArea","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","KitchenAbvGr","GarageCars","SalePrice")]
porciento <- 70/100
set.seed(18)
trainRowsNumber<-sample(1:nrow(trainTree),porciento*nrow(trainTree))
train1<-trainTree[trainRowsNumber,]
test1<-trainTree[-trainRowsNumber,]
modelo_RF<-randomForest(grupo~.,data=train1)
